#ifndef MESSAGEHANDLER_H
#define MESSAGEHANDLER_H

#include <mutex>
#include <queue>

#include "../game/graphics.h"
#include "../game/ship.h"
#include "../networking/socket.h"
#include "buffers/schema_generated.h"
#include "flatbuffers/flatbuffers.h"

typedef flatbuffers::FlatBufferBuilder MessageBuffer;

typedef struct msg {
    uint8_t *data;
    unsigned int len;
} Msg;

class MessageHandler {
  public:
    typedef std::shared_ptr<MessageHandler> Ptr;

    MessageHandler(int port, int host_port, char *host_address,
                   MultiplayerRole multiplayerRole);

    // --- Message builders -- //
    //
    // All variables from flatbuffers -generated code are named with a _ prefix.
    // Flatbuffers can be generated by runnign flatc *.fbs.
    //

    ///
    /// \brief buildShipMessage reads all needed data from the Ship instance and
    /// builds a VisualObject -message
    /// \param ship instance
    /// \return MessageBuffer of the serialized data
    ///
    MessageBuffer buildShipMessage(Ship *ship);

    void send(MessageBuffer data);
    void send(uint8_t *data, unsigned int len);
    void send(char *data);

  private:
    MultiplayerRole multiplayerRole_;

    // Socket
    Socket::Ptr socket_;
    int host_channel_;

    std::queue<char *> recv_buffer_;
    std::queue<Msg> send_buffer_;
    std::mutex recv_mutex_;
    std::mutex send_mutex_;

    std::vector<Blaster::Messages::Point> getFlatOutline_(Polygon *source);
    Blaster::Messages::Color getFlatColor_(Polygon *source);
};

#endif // MESSAGEHANDLER_H
